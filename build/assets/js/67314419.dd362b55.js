"use strict";(self.webpackChunkportal_2=self.webpackChunkportal_2||[]).push([[335],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return h}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=c(n),h=o,m=p["".concat(u,".").concat(h)]||p[h]||d[h]||a;return n?r.createElement(m,l(l({ref:t},s),{},{components:n})):r.createElement(m,l({ref:t},s))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=p;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var c=2;c<a;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8886:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return u},default:function(){return h},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return d}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),l=["components"],i={sidebar_position:2},u="Leetcode Solution",c={unversionedId:"WritingSamples/Leetcode Solution",id:"WritingSamples/Leetcode Solution",title:"Leetcode Solution",description:"Writing sample for a LeetCode Medium Solution",source:"@site/docs/WritingSamples/Leetcode Solution.md",sourceDirName:"WritingSamples",slug:"/WritingSamples/Leetcode Solution",permalink:"/WritingSamples/Leetcode Solution",editUrl:"https://github.com/lvllvl/portal2.git/docs/WritingSamples/Leetcode Solution.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Speed-Detection",permalink:"/WritingSamples/Speed-Detection"}},s={},d=[{value:"Writing sample for a LeetCode Medium Solution",id:"writing-sample-for-a-leetcode-medium-solution",level:4},{value:"1138. Alphabet Board Path",id:"1138-alphabet-board-path",level:2},{value:"Medium https://leetcode.com/problems/alphabet-board-path/",id:"medium-httpsleetcodecomproblemsalphabet-board-path",level:4},{value:"Goal",id:"goal",level:3},{value:"Initial Strategy: Approaching Our Solution",id:"initial-strategy-approaching-our-solution",level:2},{value:"A Better Data Structure",id:"a-better-data-structure",level:2},{value:"Testing Our Dictionary: How Will It Work?",id:"testing-our-dictionary-how-will-it-work",level:3},{value:"Code",id:"code",level:2}],p={toc:d};function h(e){var t=e.components,n=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"leetcode-solution"},"Leetcode Solution"),(0,a.kt)("h4",{id:"writing-sample-for-a-leetcode-medium-solution"},"Writing sample for a LeetCode Medium Solution"),(0,a.kt)("h2",{id:"1138-alphabet-board-path"},"1138. Alphabet Board Path"),(0,a.kt)("h4",{id:"medium-httpsleetcodecomproblemsalphabet-board-path"},"Medium ",(0,a.kt)("a",{parentName:"h4",href:"https://leetcode.com/problems/alphabet-board-path/"},"https://leetcode.com/problems/alphabet-board-path/")),(0,a.kt)("p",{align:"center"},(0,a.kt)("img",{width:"403",height:"500",src:"../../imagesLC/azboard.png"}),(0,a.kt)("p",null,"Fig. 1")),(0,a.kt)("h3",{id:"goal"},"Goal"),(0,a.kt)("p",null,"We are given the following parameters, board and target. Our board\nvariable will always remain the same, while target will be any series\nof lowercase letters."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"board = [ 'abcde', 'fghij', 'klmno', 'pqrst', 'uvwxy', 'z' ]\ntarget = 'leet'\n")),(0,a.kt)("p",null,"Target acts as a reference for the letters we must find on the alphabet\nboard. The initial starting point is always 'a'. Our goal is to find every\nletter from target on the board."),(0,a.kt)("p",null,"As we find each letter we'll record the directions we take along the way,\ne.g., Down, Down, Left, Right, etc. That will be the final answer we\nreturn in string format. "),(0,a.kt)("p",null,"Example 1:\nHere's an example of what inputs and outputs are expected from us. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: target = "leet"\nOutput: "DDR!UURRR!!DDD!"\n')),(0,a.kt)("p",null,"The exclamation points act as a separator between each letter in target.\nOnce we find a letter, we also add an exclamation point. "),(0,a.kt)("h2",{id:"initial-strategy-approaching-our-solution"},"Initial Strategy: Approaching Our Solution"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"board = [ 'abcde', 'fghij', 'klmno', 'pqrst', 'uvwxy', 'z' ]\ntarget = 'leet'\n")),(0,a.kt)("p",null,"One way to approach this problem is to talk through a solution without using ",(0,a.kt)("em",{parentName:"p"},"any"),"\ncode. If we can articulate a solution, then we can convert the solution into\ncode. "),(0,a.kt)("p",null,"Fig. 1, depicts our board variable as an ",(0,a.kt)("em",{parentName:"p"},"actual board"),". Starting from 'a', we\ncan navigate up, down, left, or right to find each letter in target."),(0,a.kt)("p",null,"Now how can we convert that solution to code?"),(0,a.kt)("p",null,"When we used Fig. 1 it provided an easy way to know our location on the board at all times.\nWe knew what letter we were at and where the letter was in relation to other letters on the\nboard."),(0,a.kt)("p",null,"Currently, our board variable is a list of strings. If possible we need a data structure that\nallows us to easily know where we are on the board and what letters are around us. This current list\nwill not work. "),(0,a.kt)("h2",{id:"a-better-data-structure"},"A Better Data Structure"),(0,a.kt)("p",null,"We need to find an alternative data structure that allows us to:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Access letters quickly "),(0,a.kt)("li",{parentName:"ul"},"Access each letter's position in relation to other letters")),(0,a.kt)("p",null,"We can build off our example in Fig. 1 and add coordinates to each\nletter. Fig. 2 below pairs each letter with a set of coordinates. "),(0,a.kt)("p",{align:"center"},(0,a.kt)("img",{width:"403",height:"500",src:"../../imagesLC/azboardCoords.png"}),(0,a.kt)("p",null,"Fig. 2")),(0,a.kt)("p",null,"This approach allows us to use a dictionary. A dictionary pairs together a\nkey / value combination. The key allows us to lookup the value in O( 1 ) time. "),(0,a.kt)("p",null,"In our case, the key / value combination could be a letter and its coordinates,\ne.g., 'a': (0, 0), 'b': (0, 1), 'c': (0, 2), etc. "),(0,a.kt)("p",null,"Let's create a dictionary comprehension to create our new_board dictionary. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"new_board = { board[word][letter]: (word,letter) for word in range(len(board))\n                                             for letter in range(len(board[word])) }\n")),(0,a.kt)("h3",{id:"testing-our-dictionary-how-will-it-work"},"Testing Our Dictionary: How Will It Work?"),(0,a.kt)("p",null,"Here's a quick example of how we will use our dictionary. "),(0,a.kt)("p",null,"target = 'aj'"),(0,a.kt)("p",null,"Our task is to record the directions to get from 'a' to 'j'. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"Current position at 'a': (0,0) \nDestination position at 'j': (1,4) \n\nverticalMovement = destinationRow - currentRow = 1 - 0 = 1 \nhorizontalMovement = destinationCol - currentCol = 4 - 0 = 4\n\nSince we always start at (0,0) assume that any positive vertical movement is\ndown, and any positive horizontal movement is to the right. \n\nTherefore our vertical movement is 1 down, i.e., 'D' and\nour horizontal movement is 4 right, i.e., 'RRRR'.\n\nOutput:'DRRRR!'\n")),(0,a.kt)("p",null,"Now that we have developed a way to deal with the coordinates in our\ndictionary, we can now write the code for it. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def calculate( curr, dest ):\n   currRow, currCol = curr # We can unpack our tuples this way\n   destRow, destCol = dest \n\n   verticalMovement = destRow - currRow\n   horizontalMovement = destCol - currCol \n\n   return row, col \n")),(0,a.kt)("h2",{id:"code"},"Code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n   def alphabetBoardPath( self, target: str ) -> str:\n\n      board = [ 'abcde', 'fghij', 'klmno', 'pqrst', 'uvwxy', 'z' ]\n\n      new_board = { board[word][letter]: (word,letter) for word in range(len(board))\n                                                   for letter in range(len(board[word])) }\n      \n      def calculate( curr: tuple, dest: tuple ) -> tuple:\n\n         currRow, currCol = curr # We can unpack our tuples this way\n         destRow, destCol = dest \n\n         verticalMovement = destRow - currRow\n         horizontalMovement = destCol - currCol \n\n         return row, col # return a tuple \n     \n     curr = (0,0) # our default starting point\n     ans = '' # return this \n\n     for i in range( len( target ) ):\n\n        row, col = calculate( curr, new_board[ target[ i ] ])\n\n        if row == 0 and y == 0: # 0,0 means same letter again, e.g., 'ee' \n           ans += '!'\n           continue\n        \n        # Adjust Left, Up\n        if col < 0: \n           while col < 0:\n              ans += 'L'\n              col += 1\n        if row < 0:\n           while row < 0:\n              ans += 'U'\n              row += 1\n\n        # Adjust Right, Down\n        if col > 0:\n           while col > 0:\n              ans += 'R'\n              col -= 1\n\n        if row > 0:\n           while row > 0:\n              ans += 'D'\n              row -= 1 \n\n        curr = new_board[ target[ i ] ]\n     ans += '!'\n      \n\n     return ans \n")))}h.isMDXComponent=!0}}]);